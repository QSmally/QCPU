---
title: "CLI"
---

- `qcpu [-o output] [--offset address] file.s | file.o...`: performs
  preprocessing, assembling and linking of the designated files. A file may be
  an assembly, object or executable file.
- `qcpu -c [-o output.o] file.s...`: performs only preprocessing and
  assembling.
- `qcpu -p [-o output.s] file.s...`: performs only preprocessing.

An optimiser option may be set to cut out dead text paths, `-O1` (first level
optimisation).

### Linker

- `qcpul [-o output] [--offset address] file.o...`: the jump to main of the
  linker, called from the linking step of `qcpu` and `qcpuc`. An offset is its
  virtual label linking offset (defaults to 0).

QCPU CLI's linker combines object files, resolves the reference addresses and
reorders the sections based on a linker script @gnu-ld. The assembler makes sure
that addresses are reachable (e.g. relative vs. absolute jumps). In the future,
GNU `ld` will be used.

<!--
### Compiler

Coming soonâ„¢

- `qcpuc [-o output] file.c...`: performs compilation and all of the above.
- `qcpuc -c [-o output.o] file.c...`: performs compilation and assembling
  without linking.
- `qcpuc -p [-o output.c] file.c...`: only performs the language preprocessor.
-->

<!--
## Bootstrapping filesystem

- `qcpub --create [--bootable executable] [--device id] filesystem.o`
- `qcpub --copy [--device id] new_filesystem.o filesystem.o`
- `qcpub --add [--continuous] [--name string] linked_file path filesystem.o`
- `qcpub --add /directory filesystem.o`
- `qcpub --rm path filesystem.o`
- `qcpub --tree filesystem.o`

A filesystem object can finally be linked through `qcpul filesystem.o`. Its
starting physical address is `0x##0000`, with `##` being the device id.
-->

<!--
## Emulation

Each executable file generated by `qcpul` starts with a Shebang:

```{.bash}
#!/usr/bin/env qcpuv
```

It calls the following synopsis:

```
qcpuv [-s hertz] [-b batch] executable
```

Emulates the executable through instruction-level virtualisation. If
`executable` includes a boot `entrypoint`, it gets loaded into fixed kernel
space in kernel mode, otherwise into userland in user mode. A basic memory map
is then done to map globals, locals and the stack.

- `-s hertz` is default 0 (no wait),
- `-b batch` is default 1 (one cycle per update).
-->

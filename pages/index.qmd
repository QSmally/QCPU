---
title: "Instruction set"
subtitle: "Instruction set 2CR 5-3-(8) reference"
---

::: {.column-screen-inset-left}
| QCPU 2CR     | Short   | Description                       | B | Representation                         |
|--------------+---------+-----------------------------------+---+----------------------------------------|
| `0-0000-###` | **MSC** | Miscellaneous operations          | - | -                                      |
| `0-0001-###` | **PSH** | Push register to stack            | 1 | `push('reg')`                          |
| `0-0010-###` | **SPM** | Stack pointer mutate              | 1 | `spt = spt + signed 'bytes'`           |
| `0-0011-###` | **IMM** | Load immediate into register      | 2 | `'reg' = imm`                          |
| `0-0100-###` | **XCH** | Exchange register and accumulator | 1 | `'reg' = acc, acc = 'reg'`             |
| `0-0101-###` | **AST** | Accumulator store                 | 1 | `acc = 'reg'`                          |
| `0-0110-###` | **RST** | Register store                    | 1 | `'reg' = acc`                          |
| `0-0111-###` | **INC** | Increment                         | 1 | `'reg' = 'reg' + 1`                    |
| `0-1000-###` | **DEC** | Decrement                         | 1 | `'reg' = 'reg' - 1`                    |
| `0-1001-###` | **NEG** | Negate                            | 1 | `'reg' = -'reg'`                       |
| `0-1010-###` | **RSH** | Right shift                       | 1 | `'reg' = 'reg' >> 1`                   |
| `0-1011-###` | **ADD** | Addition                          | 1 | `acc = acc + 'reg'`                    |
| `0-1100-###` | **SUB** | Subtraction                       | 1 | `acc = acc - 'reg'`                    |
| `0-1101-###` | **IOR** | Bitwise incl. OR (insert bits)    | 1 | `acc = acc IOR 'reg'`                  |
| `0-1110-###` | **AND** | Bitwise AND (mask/remove bits)    | 1 | `acc = acc AND 'reg'`                  |
| `0-1111-###` | **XOR** | Bitwise excl. OR (toggle bits)    | 1 | `acc = acc XOR 'reg'`                  |
| `1-0000-###` | **BSL** | Barrel shift left                 | 1 | `acc = acc << 'amt'`                   |
| `1-0001-###` | **BPL** | Barrel shift left (pointer)       | 1 | `acc = acc << 'reg'`                   |
| `1-0010-###` | **BSR** | Barrel shift right                | 1 | `acc = acc >> 'amt'`                   |
| `1-0011-###` | **BPR** | Barrel shift right (pointer)      | 1 | `acc = acc >> 'reg'`                   |
| `1-01-#####` | **ENT** | Enter kernel mode                 | 1 | `push('sc', acc, pc + 1), pc = const`  |
| `1-1000-###` | **DMA** | Privileged direct memory access   | 1 | `mmu('action')`                        |
| `1-1001-###` | **PRT** | Privileged port instruction       | 2 | `acc = [await] port('reg' + imm, acc)` |
| `1-1010-###` | **BRH** | Conditionally jump to address     | 2 | `pc = imm on [delayed] 'condition'`    |
| `1-1011#-##` | **JMP** | Jump to address                   | 2 | `push(pc + 1)?, pc = 'reg' + imm`      |
| `1-110##-##` | **MST** | Memory store                      | 2 | `*('reg' + imm) = acc`                 |
| `1-111##-##` | **MLD** | Memory load                       | 2 | `acc = *('reg' + imm)`                 |
: {tbl-colwidths=[15,10,30,5,40]}
:::

::: {.note}
TODO: Remove PRT in favour of memory mapped using virtual
:::

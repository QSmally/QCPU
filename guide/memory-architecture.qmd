---
title: "Memory architecture"
subtitle: "A look into QCPU's memory system"
description: "QCPU's 16 bit virtual memory, 24 bit physical memory and addressing modes."
date: 2023-10-8
categories: [memory]
---

<!--
https://en.wikipedia.org/wiki/Intel_8080
https://en.wikipedia.org/wiki/MOS_Technology_6502
https://en.wikipedia.org/wiki/Motorola_6800
https://en.wikipedia.org/wiki/Zilog_Z80
-->

...

## Memory access

A memory instruction (which is either `mst` or `mld`) can be composed like the
following:

```{.asm}
instr <mode:2> <selector:2>, <static offset:8>
```

An access mode are two status bits which modify the execution of the memory
access.

- Word access: performs an access on two bytes by using the index registers (`rx`, `ry`) as source/destination;
- Offset: whether to add an 8 bit offset (`rz`) to the access, indicated by `'` after the selector.

For the selector, it's the known base pointer for the first memory access:

| selector | userland | description                  | kernel mode | description                 |
|----------+----------+------------------------------+-------------+-----------------------------|
| `00`     | `sid`    | index registers (x/y)        | inherit     |                             |
| `01`     | `sgl`    | globals                      | `skg`       | kernel globals              |
| `10`     | `sfb`    | current stack frame position | `skf`       | kernel stack frame position |
| `11`     | `ssb`    | stack base position          | `skv`       | kernel variable space       |

Selectors in userland are read from a memory mapped space.

Each memory access can have a static offset, which is an 8 bit unsigned
immediate integer which is added to the address. A dynamic offset can be added
by adding the 'offset' (`'`) flag to the access mode. It results in unsigned
register `rz` being added to the address. Together, registers `rx`, `ry`, `rz`
make up the memory registers.

::: {.callout-note}
Note: currently missing post-increment (pre-decrement can be done with `dec rz`)
:::

### Scenarios

```{.txt}
mld  sid,  offset       ; load absolute
mld  sid', offset       ; load absolute with dynamic offset
mld  sgl,  offset       ; load from globals
mld  sgl', offset       ;
mld  ssb,  offset       ; load from absolute stack position
mld  ssb', offset       ;
mld  sfb,  offset       ; load from current stack frame position
mld  sfb', offset       ;
```

## Reference indirection

An indirect access is done by loading two bytes into the index registers,
combined with another access with the `sid` access mode.

```{.txt}
mldw sfb,  offset       ; load first address

mld  sid,  offset       ; load from pointer located in stack
mld  sid', offset       ; load from dynamically offsetted pointer in stack

mld  sfb,  offset       ; equivalent to (adds 5 bytes):
rst rx
mld  sfb,  offset + 1
rst ry
ast ra                  ; dynamic offset
mld  sid', offset
```

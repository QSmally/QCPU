---
title: "Memory architecture"
subtitle: "A look into QCPU's memory system"
description: "QCPU's 16 bit virtual memory, 24 bit physical memory and addressing modes."
date: 2023-10-8
categories: [memory]
---

<!--
https://en.wikipedia.org/wiki/Intel_8080
https://en.wikipedia.org/wiki/MOS_Technology_6502
https://en.wikipedia.org/wiki/Motorola_6800
https://en.wikipedia.org/wiki/Zilog_Z80
-->

...

## Memory access

A memory instruction (which is either `mst` or `mld`) can be composed like the
following:

```{.asm}
instr <mode:2> <selector:2>, <static offset:8>
```

An access mode are two status bits which modify the execution of the memory
access.

- Word access: performs an access on two bytes by using the index register (`rx`, `ry`);
- Offset: whether to add an 8 bit offset to the (last) access.

For the selector, it's the known base pointer for the first memory access:

| selector | short | description                               |
|----------+-------+-------------------------------------------|
| `00`     | `sid` | index registers (x/y)                     |
| `01`     | `sgl` | globals (/kernel base position, `0xC000`) |
| `10`     | `ssb` | stack base position                       |
| `11`     | `sfb` | current stack frame position              |

::: {.note}
Note: currently missing post-increment (pre-decrement can be done with `dec rz`)
:::

## Scenarios

```{.asm}
mld  sid,   offset   ; load absolute
mld  sid+o, offset   ; load absolute with dynamic offset
mld  sgl,   offset   ; load from global text
mld  sgl+o, offset   ;
mld  ssb,   offset   ; load from absolute stack position
mld  ssb+o, offset   ;
mld  sfb,   offset   ; load from current stack frame position
mld  sfb+o, offset   ;
```

## Reference indirection

```{.asm}
mldw sfb,   offset   ; load first address

mld  sid,   offset   ; load from pointer located in stack
mld  sid+o, offset   ; load from dynamically offsetted pointer in stack

equivalent_to:       ; adds 5 bytes
    mld  sfb,   offset
    rst rx
    mld  sfb,   offset+1
    rst ry
    ast ra           ; dynamic offset
    mld  sid+o, offset
```

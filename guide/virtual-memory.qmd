---
title: "Virtual memory"
subtitle: "Physical memory mapping in userland"
description: "Allocators in userland in order to fully manage a process' virtual memory."
date: 2023-10-20
categories: [memory, userland]
---

Memory is addressed with 16 bits. A segment is the upper byte of that address,
being 256 bytes. Physical memory is mapped to the userspace's virtual memory.
In turn, the MMU reads from the map in order to put the link between virtual
(16 bit) and physical (24 bit) memory.

## Address space

QCPU has a single virtual space, divided into multiple address spaces. Each
process has its own userland, whilst a kernel is always loaded on the same
address offset regardless of which process is currently being executed.

```
                 64 KiB
                (16 bit)
0x0000                   0xC000   0xFFFF
   |------------------------|--------|
   | userland               | kernel |
     48 KiB                   16 KiB
```

A kernel can be loaded from address `0xC000` (which may be customisable). QCPU
will signal a segmentation fault when processes residing in userspace attempt to
access the kernel address space when not in a privileged CPU mode. Likewise,
trying to perform write instructions to segments with the `unmapped` or
`readonly` flags will also signal a segfault.

### Kernel space

Kernel space is divided into two parts. Text and global mutable data of the
kernel is loaded in the first part. It primarily has all fixed kernel structures
ready to be used. It also includes the kernel memory map, which maps the second
part of the kernel space to physical memory[^1]. It allows the kernel to
generically modify data whilst still being in the virtual context:

- 'Fixed' kernel space;
- 'Variable' kernel space.

```
                      16 KiB
          0xC000      0xD000      0xFFFF
             |-----------|-----------|
 | userland  | kfixed    | kvariable |
               12 KiB      4 KiB
```

System calls (like any other interrupt) put the CPU into kernel mode and jump
to designated parts of kernel space, which doesn't trigger a segfault:

```{.asm}
mldw sfb, 3      ; load address of string from stack
imm  rz,  0x00   ; mask 0
sysc @fopen
```

Putting the CPU out of kernel mode is done by jumping out of the kernel section.

[^1]: Kernel details depends on implementation.

### MMU: memory management unit

Address spaces are stored by reading from designated areas of the memory. In
order to bootstrap the space, the fixed kernel space is set through the MMU
device (specifically, the DMAC interface). A set segment in fixed kernel space
directs which variable kernel space segments are loaded. Lastly, a set segment
in variable kernel space directs which userspace segments are loaded.

Cleverly, this allows the kernel to switch userland processes by performing a
couple of memory instructions: setting the userspace mapping reference in fixed
kernel space. Flushing the MMU reloads its values, which a jump can take effect.

```
                 64 KiB
             /-------------\
 {           } /---------{ |         }
 |-----------|[M]--------|[M]--------|
 | userland  | kfixed    | kvariable |
   48 KiB      12 KiB      4 KiB
```

Figure above depicts the memory map chain from `kfixed`, to `kvariable`, to
`userland`. `kfixed` is a special section mapped by the MMU through the DMAC
interface.

### DMAC: direct memory access controller

A DMAC operates the MMU and its managed memory. Through it's I/O (device `0`)
interface, only operable in kernel mode and mapped to a section in fixed kernel
space, reading from and writing to its registers controls the physical
operations on memory.

...

- `setk` (set 'kernel' section to 12 KiB of linear physical memory).

## Memory layout

For the userland, memory is divided into multiple sections per the process
memory map. In between the square brackets is the amount of segments necessary
for that section.

- Instance data `[1]`
    - process, thread id
    - stack base, frame, insertion ptrs
    - context register copy (sysc)
- Globals (mutable) `[1]`
- Locals (mutable, thread-local) `[0+]`
    - pointed to by globals
- Text (+ (dynamic) libaries, readonly) `[1+]`
- Stack (thread-local) `[1+...]`
    - env, args, exit ptrs
    - initial stack structure by executable
- Heap `[...rest]`

## Mapping model

A kernel can only map segments of 256 bytes to a process' virtual memory. In
order to handle multiple smaller allocations efficiently, like 24 byte arrays
and a couple of small objects, an allocator layer in userland may be used. A
system call is only done when more physical space is necessary for the
allocation rather than with every single allocation.

The MMU holds a table of virtual segments and their physical address for the
userspace. It also holds the flags belonging to the segment.

0. Flags
    - Readonly
    - Copy-on-write
2. Device id
3. Segment address

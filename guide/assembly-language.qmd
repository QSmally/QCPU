---
title: "Assembly language"
subtitle: "Build programs for QCPU"
description: "QCPU's assembly language, linker and compiler extensions."
date: 2023-11-04
categories: [assembly]
filters:
    - include-code-files
---

Like most assemblers, each QCPU 2 source line contains some combination of the
following four fields:

```{.asm}
label:      instr operands          ; comments                            col 80
```

If a line starts with the `@` symbol, it refers to an assembler directive.

## Directives

An assembler can read directives from the QCPU assembly file. Each directive
starts with an `@` symbol and don't represent any size in the assembly (except
for an `@include` or the result of such a directive).

- `@symbols <file>`: include the symbol definitions of a file, for ABI interfaces
- `@org <address>`: marks the linker offset (`--offset <address>` in `qcpul`)
- `@define <name> <value>`: a C preprocessor-like define
- `@define <namespace>`: a collection of definitions
    - `@define <name> <value>`: adds `@namespace.name`
    - `@end`
- `@macro <name> [arguments...]`: defines reusable text
    - `@end`
- `@region <size>`: marks a region with a fixed size, default filled with zeros
    - `@end`
- `@section <type>`: marks the start of a section, managed by the linker
    - [`instance`: address space interface, usually defined by the linker]
    - `globals`: shared by threads, max. 256 bytes, fixed size
    - `gextension`: extension on globals, fixed size
    - `signals`: process signal vector
    - `stack`: thread-local, initially max. 256 bytes
    - `text`: readonly, executable

### Compiler extensions

A kernel may inject extensions into the files, and these are identified by
specific macro names.

- `@macro kext-stack-base`: leading bytes of the stack

An example is `kext-stack-base`:

```{.asm}
@macro kext-stack-base
.env:       reserve u16 1
.args:      reserve u16 1
@end
```

## References

Labels are used to reference either data or text. A public `reference:` can be
accessed by any file which is linked against it. In contrast, a `.reference:` is
a file-local label which can only be accessed by the addresses in the same file.
A linker error is thrown if a private label was attempted to be accessed from
the outside.

An executable is required to have a public `main:` label.

Regardless of access flags, all labels are addressed with the `.<label>` syntax.

## (Pseudo-)instructions

Pseudo-instructions are formulated like normal instructions, but are interpreted
by the assembler to produce another output.

- `u8`: a byte
- `u16`: a word
- `u24`: a 24-bit word
- `u32`: a 32-bit word

A couple of special pseudo-instructions manage the encoding of data:

- `ascii`: like u8, but with explicit ASCII encoding
- `reserve`: uninitialised amount of data

See the instruction set page for a reference.

### Types

```{.asm}
@section globals
    .queue      @queue(24)              ; macro 'queue' structure
    .queuep     @queuep(queuec)

@section gextension
    .queuec     @queuec(24)
```

### Inline data

A comma between the first operand (that resides in the instruction) and its
secondary byte (such as an offset) is short for having a newline and `u8 ...`.
Having `imm ra, 0x01` is therefore a composition of `imm ra` and `u8 0x01`.

## Snippet

```{.asm include="snippets/example.s"}
```
